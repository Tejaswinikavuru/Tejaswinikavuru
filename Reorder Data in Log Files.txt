Problem : 


You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:

Letter-logs: All words (except the identifier) consist of lowercase English letters.
Digit-logs: All words (except the identifier) consist of digits.
Reorder these logs so that:

The letter-logs come before all digit-logs.
The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
The digit-logs maintain their relative ordering.
Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
Explanation:
The letter-log contents are all different, so their ordering is "art can", "art zero", "own kit dig".
The digit-logs have a relative order of "dig1 8 1 5 1", "dig2 3 6".
Example 2:

Input: logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]
 

Constraints:

1 <= logs.length <= 100
3 <= logs[i].length <= 100
All the tokens of logs[i] are separated by a single space.
logs[i] is guaranteed to have an identifier and at least one word after the identifier.


My Solution developed in LeetCode using C# programming language:

public class Solution {
    public string[] ReorderLogFiles(string[] logs) {
        
     
        Dictionary<string,string> letterlogs = new  Dictionary<string,string>();
        Dictionary<string,string> digitlogs = new  Dictionary<string,string>();
         Dictionary<string,string> tmp1 = new  Dictionary<string,string>(); 
         Dictionary<string,string> tmp2 = new  Dictionary<string,string>(); 
        
      
        foreach(var item in logs.ToDictionary(x=>x.Substring(0,x.IndexOf(' ')), x=>x.Replace(x.Substring(0,x.IndexOf(' ')),"")))
        {
            //Console.WriteLine(item.Value);
            if(item.Value != null)
            {
                var s = item.Value.Trim().Split(' ');
              //  Console.WriteLine(s[0].ToString());
               
                var isDigitlog = int.TryParse(s[0] , out int val);
                if(isDigitlog)
                {
                    digitlogs.Add(item.Key,item.Value);
                      tmp2.Add(item.Key,s.Count().ToString());
                }
                else
                {
                    letterlogs.Add(item.Key,item.Value);
                     tmp1.Add(item.Key,s.Count().ToString());
                }
            }
        }
        var res = letterlogs.Concat(digitlogs).ToDictionary(x=>x.Key,x=>x.Value); 
        
        var result = new List<string>();
        foreach(var ele in tmp1.OrderBy(x=>x.Value).Select(x =>x).Concat(tmp2).ToDictionary(x=>x.Key,x=>x.Value))
        {
            if(res.ContainsKey(ele.Key))
            {
                result.Add(ele.Key+res[ele.Key]);
            }
        }
     
        return result.ToArray();
    }
}